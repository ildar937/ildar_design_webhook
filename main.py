
import logging
from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Update, Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
import config

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("ildar_webhook")

bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
app = FastAPI()

def kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="lead")],
        [InlineKeyboardButton(text="–ü—Ä–∞–π—Å (PDF)", callback_data="price")],
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=f"https://t.me/{config.PUBLIC_CHANNEL_USERNAME}")],
    ])

def src_text(s):
    return {
        "site":"–í—ã –ø—Ä–∏—à–ª–∏ <b>—Å —Å–∞–π—Ç–∞</b>. –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ —Å—Ä–æ–∫ ‚Äî –æ—Ç–≤–µ—á—É –±—ã—Å—Ç—Ä–æ.",
        "pdf":"–í—ã –ø—Ä–∏—à–ª–∏ <b>–∏–∑ PDF</b>. –ü—Ä–∏—à–ª–∏—Ç–µ 1‚Äì2 —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏ –¥–µ–¥–ª–∞–π–Ω.",
        "channel":"–í—ã –ø—Ä–∏—à–ª–∏ <b>–∏–∑ –∫–∞–Ω–∞–ª–∞</b>. –ü–æ–¥—Å–∫–∞–∂—É –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –∏ —Å—Ä–æ–∫–∞–º."
    }.get(s, "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å AI-–¥–∏–∑–∞–π–Ω–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫, –æ–±–ª–æ–∂–µ–∫ –∏ –∞–≤–∞—Ç–∞—Ä–æ–≤.")

@dp.message(CommandStart())
async def start(m: Message):
    payload = m.text.split(' ',1)[1].strip() if m.text and ' ' in m.text else ''
    src = payload or 'direct'
    await m.answer(f"–ü—Ä–∏–≤–µ—Ç, {m.from_user.full_name}!\n{src_text(src)}", reply_markup=kb())
    if config.MANAGER_CHAT_ID:
        u = m.from_user
        note = f"üÜï –ö–æ–Ω—Ç–∞–∫—Ç ¬∑ src:<b>{src}</b>\n@{u.username or '‚Äî'} ¬∑ {u.full_name} ¬∑ <code>{u.id}</code>"
        try:
            await bot.send_message(config.MANAGER_CHAT_ID, note)
        except Exception as e:
            log.warning("notify fail: %s", e)

@dp.message(Command("id"))
async def my_id(m: Message):
    await m.answer(f"–í–∞—à chat_id: <code>{m.from_user.id}</code>")

@dp.message(Command("price"))
async def price_cmd(m: Message):
    try:
        await m.answer_document(FSInputFile(config.PDF_PATH), caption="–ü—Ä–∞–π—Å –∏ –∫–µ–π—Å—ã (PDF)")
    except Exception as e:
        await m.answer("–ü—Ä–∞–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PDF_PATH –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        log.error("price error: %s", e)

@dp.callback_query(F.data == "price")
async def cb_price(c):
    await c.answer()
    try:
        await c.message.answer_document(FSInputFile(config.PDF_PATH), caption="–ü—Ä–∞–π—Å –∏ –∫–µ–π—Å—ã (PDF)")
    except Exception as e:
        await c.message.answer("–ü—Ä–∞–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        log.error("price error: %s", e)

@dp.callback_query(F.data == "lead")
async def cb_lead(c):
    await c.answer()
    await c.message.answer("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å –∏ —Å—Ä–æ–∫. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å 1‚Äì2 —Ñ–æ—Ç–æ.")

@dp.message(F.photo | F.text)
async def relay(m: Message):
    if not config.MANAGER_CHAT_ID:
        return
    u = m.from_user
    try:
        await bot.send_message(config.MANAGER_CHAT_ID, f"‚úâÔ∏è @{u.username or '‚Äî'} ¬∑ {u.full_name} ¬∑ <code>{u.id}</code>")
        await m.forward(MANAGER_CHAT_ID := config.MANAGER_CHAT_ID)  # reuse
    except Exception as e:
        log.warning("forward fail: %s", e)

@app.get("/ping")
async def ping():
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    if not config.BOT_TOKEN:
        log.error("BOT_TOKEN empty")
        return
    if config.BASE_URL:
        try:
            await bot.set_webhook(f"{config.BASE_URL}/tg/{config.WEBHOOK_SECRET}",
                                  secret_token=config.WEBHOOK_SECRET)
            log.info("webhook set")
        except Exception as e:
            log.error("set webhook failed: %s", e)
    else:
        log.info("BASE_URL empty ‚Äî set after first deploy")

@app.post("/tg/{secret}")
async def tg(secret: str, request: Request):
    if secret != config.WEBHOOK_SECRET:
        raise HTTPException(403, "forbidden")
    update = Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}
