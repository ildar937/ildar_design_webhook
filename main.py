import os
import logging

from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import Update, Message, InlineKeyboardMarkup, InlineKeyboardButton

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("ildar_webhook")

# ---------- ENV ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
PDF_PATH = os.getenv("PDFPATH")
PUBLIC_CHANNEL = os.getenv("PUBLICCHANNEL")
WEBHOOK_SECRET = os.getenv("WEBHOOKSECRET") or os.getenv("WEBHOOK_SECRET") or "ai123secret"

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Environment Variables Render")

# ---------- AIOGRAM (v3.7+) ----------
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")  # –≤–º–µ—Å—Ç–æ parse_mode –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
)
dp = Dispatcher()

def kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url="https://t.me/ildarDESIGNBOT")],
            [InlineKeyboardButton(text="–ü—Ä–∞–π—Å (PDF)", url=PDF_PATH or "https://example.com")],
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=PUBLIC_CHANNEL or "https://t.me/example")],
        ]
    )

def src_text(src: str) -> str:
    return {
        "site":    "–í—ã –ø—Ä–∏—à–ª–∏ <b>—Å —Å–∞–π—Ç–∞</b>. –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É:",
        "pdf":     "–í—ã –ø—Ä–∏—à–ª–∏ <b>–∏–∑ PDF</b>. –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ:",
        "channel": "–í—ã –ø—Ä–∏—à–ª–∏ <b>–∏–∑ –∫–∞–Ω–∞–ª–∞</b>. –ß–µ–º –ø–æ–º–æ—á—å?",
    }.get(src, "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å AI‚Äë–¥–∏–∑–∞–π–Ω–æ–º!")

@dp.message(CommandStart())
async def on_start(m: Message):
    await m.answer(src_text("site"), reply_markup=kb())

@dp.message(F.text.lower() == "site")
async def on_site(m: Message):
    await m.answer("–ü—Ä–∏–Ω—è–ª ¬´site¬ª. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ? üôÇ", reply_markup=kb())

# ---------- FASTAPI ----------
app = FastAPI()

@app.get("/ping")
async def ping():
    return {"ok": True}

@app.post("/tg/{secret}")
async def tg_webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="bad secret")

    # —Å–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ (–µ—Å–ª–∏ Telegram –µ–≥–æ –ø—Ä–∏—Å–ª–∞–ª)
    header_secret = request.headers.get("x-telegram-bot-api-secret-token")
    if header_secret and header_secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="bad secret header")

    data = await request.json()
    update = Update.model_validate(data)  # aiogram v3
    await dp.feed_update(bot, update)
    return {"ok": True}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
